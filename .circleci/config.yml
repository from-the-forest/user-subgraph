version: 2.1

orbs:
  go: circleci/go@1.7.1
  docker: circleci/docker@2.2.0
  doctl: digitalocean/cli@0.1.1
  kubernetes: circleci/kubernetes@1.3.1
  node: circleci/node@5.1.0
  terraform: circleci/terraform@3.2.0

jobs:
  install:
    executor:
      name: go/default
      tag: 1.19.4
    steps:
      - checkout
      - go/load-cache
      - go/mod-download
      - go/save-cache

  secrets:
    executor:
      name: go/default
      tag: 1.19.4
    steps:
      - checkout
      - run: |
          echo "PORT=4000" >> .env
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - .env
      - store_artifacts:
          path: .env

  schema:
    executor: node/default
    steps:
      - checkout
      - run: |
          APOLLO_KEY=$APOLLO_KEY npx @apollo/rover subgraph check \
            cuffney-supergraph-vokiem@main \
            --name user-subgraph \
            --schema ./graph/schema/schema.graphql

  test:
    executor:
      name: go/default
      tag: 1.19.4
    steps:
      - checkout
      - go/load-cache
      - go/mod-download
      - go/save-cache
      - go/test:
          covermode: atomic
          failfast: true
          race: true

  lint:
    executor:
      name: go/default
      tag: 1.19.4
    steps:
      - checkout
      - run: make lint

  build-and-push:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          registry: registry.digitalocean.com/from-the-forest
          docker-username: DO_TOKEN
          docker-password: DO_TOKEN
      - docker/build:
          registry: registry.digitalocean.com/from-the-forest
          image: user-subgraph
          tag: $CIRCLE_SHA1
          extra_build_args: --build-arg MONGO_CONNECTION_STRING=$MONGO_CONNECTION_STRING
          # extra_build_args: --build-arg SUBGRAPH_SECRET=$SUBGRAPH_SECRET
      - docker/push:
          registry: registry.digitalocean.com/from-the-forest
          image: user-subgraph
          tag: $CIRCLE_SHA1

  deploy:
    docker:
      - image: "cimg/base:stable"
    steps:
      - checkout
      - kubernetes/install
      - doctl/install
      - doctl/initialize:
          digitalocean-access-token: DO_TOKEN
      - run: doctl kubernetes cluster kubeconfig save ftf-main-cluster
      - kubernetes/create-or-update-resource:
          resource-file-path: ./.k8s/namespace.yml
      - kubernetes/update-container-image:
          container-image-updates: user-subgraph=registry.digitalocean.com/from-the-forest/user-subgraph:$CIRCLE_SHA1
          resource-file-path: ./.k8s/deployment.yml
      - kubernetes/create-or-update-resource:
          resource-file-path: ./.k8s/service.yml
      - kubernetes/create-or-update-resource:
          resource-file-path: ./.k8s/issuer.yml
      - kubernetes/create-or-update-resource:
          resource-file-path: ./.k8s/ingress.yml

  publish:
    executor: node/default
    steps:
      - checkout
      # NOTE: it seems like rover dosen't support wildcards and thus we can't have multiple gql files
      - run: |
          APOLLO_KEY=$APOLLO_KEY npx @apollo/rover subgraph publish \
            cuffney-supergraph-vokiem@main \
            --name user-subgraph \
            --schema ./graph/schema/schema.graphql

workflows:
  version: 2
  primary:
    jobs:
      - install
      - secrets
      - schema:
          context: ftf
      - test:
          requires:
            - install
            - secrets
            - schema
      - build-and-push:
          context: ftf
          requires:
            - install
            - secrets
            - test
      - terraform/fmt:
          context: ftf
          checkout: true
          path: ./infra
      - terraform/validate:
          context: ftf
          checkout: true
          path: ./infra
          requires:
            - terraform/fmt
      - terraform/plan:
          context: ftf
          checkout: true
          path: ./infra
          var: do_token=${DO_TOKEN},env=${CIRCLE_BRANCH}
          persist-workspace: true
          requires:
            - terraform/validate
      - terraform/apply:
          context: ftf
          attach-workspace: true
          path: ./infra
          var: do_token=${DO_TOKEN}
          requires:
            - build-and-push
            - terraform/plan
          filters:
            branches:
              only: main
      - deploy:
          context: ftf
          requires:
            - terraform/apply
      - publish:
          context: ftf
          requires:
            - deploy
