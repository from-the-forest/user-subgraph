# #############################################################################
# Schema extensions
# #############################################################################

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: ["@key", "@shareable"]
  )

# #############################################################################
# Custom Directives
# #############################################################################

directive @hasRole(roles: [Role!]!) on FIELD_DEFINITION

enum Role {
  ADMIN
  USER
}

# #############################################################################
# Relay
# #############################################################################

interface Node {
  "Relay node id"
  id: ID!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

# #############################################################################
# Scalar(s)
# #############################################################################

scalar Email

# #############################################################################
# Query.users
# #############################################################################

type UsersConnection {
  pageInfo: PageInfo!
  edges: [UsersEdge!]!
}

type UsersEdge {
  cursor: String!
  node: User!
}

# #############################################################################
# Mutation.updateUser
# #############################################################################

input UpdateUserInput {
  id: String!
  firstName: String
  lastName: String
  email: Email
}

# #############################################################################
# Mutation.createUser
# #############################################################################

input CreateUserInput {
  firstName: String
  lastName: String
  email: Email
}

# #############################################################################
# Entities
# #############################################################################

"""
User type
"""
type User implements Node @key(fields: "id") {
  "User's first name"
  firstName: String!
  "Node ID"
  id: ID!
  "User's last name"
  lastName: String!
  "User's full name (example of a compound field)"
  fullName: String!
  "User's email address"
  email: Email!
}

# #############################################################################
# Root Queries
# #############################################################################

type Query {
  "The currently logged in user"
  whoami: User!
  "list of users"
  searchUsers(first: Int = 10, after: String): UsersConnection! @hasRole(roles: [ADMIN])
  "relay node query"
  node(id: ID!): Node!
  "relay nodes query"
  nodes(ids: [ID!]!): [Node!]!
}

type Mutation {
  "deletes the given user"
  createUser(input: CreateUserInput!): User!
  "deletes the given user"
  updateUser(input: UpdateUserInput!): User!
  "deletes the given user"
  deleteUser(id: ID!): User!
}
