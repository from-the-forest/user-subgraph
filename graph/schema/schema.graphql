# #############################################################################
# Schema extensions
# #############################################################################

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.1"
    import: ["@key", "@shareable"]
  )
extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@tag"])

# #############################################################################
# Custom Directives
# #############################################################################

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  UUSER
}

# #############################################################################
# Relay
# #############################################################################

interface Node {
  "Relay node id"
  id: ID!
}

# TODO: type PageInfo

# #############################################################################
# Scalar(s)
# #############################################################################

scalar Email

# #############################################################################
# Entities
# #############################################################################

"""
User type
"""
type User implements Node @key(fields: "id") @tag(name: "tag-test") {
  "User's first name"
  firstName: String!
  "Node ID"
  id: ID!
  "User's last name"
  lastName: String!
  "User's full name (example of a compound field)"
  fullName: String!
  "User's email address"
  email: Email!
}

# #############################################################################
# Root Queries
# #############################################################################

type Query {
  "The currently logged in user"
  whoami: User!
  "Hostname of the machine resolving this query"
  host: String! @deprecated(reason: "this is going to be removed")
}

type Mutation {
  "deletes the given user"
  deleteUser(id: ID!): ID! @hasRole(role: ADMIN)
}
